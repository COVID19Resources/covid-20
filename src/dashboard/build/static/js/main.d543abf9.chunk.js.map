{"version":3,"sources":["Header.js","Indicators.js","Chart.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","props","data","map","trace","index","item","JSON","parse","stringify","colors","name","mode","marker","color","layout","yaxis","type","config","responsive","displayModeBar","App","state","country","countriesToCompare","worldwideData","countryData","isLoading","urlObject","URL","window","location","searchParams","get","this","setState","worldwideDataUrl","countryDataUrl","newState","Promise","all","url","a","fetch","response","text","header","length","Date","pop","date","latest","latestDateObj","prevDateObj","setDate","getDate","toISOString","slice","forEach","row","push","Confirmed","Deaths","countriesData","getCountriesDataForDate","selectedCountryData","find","Country","toLowerCase","newCasesRate","toFixed","latestCountryData","prevCountryData","trace1","x","y","trace2","trace3","previousRow","parseInt","traces","options","value","label","latestData","set","history","pushState","path","newList","getTotalCasesAndDeaths","getNewCasesAndRate","chartData","getChartData","getCountryOptions","defaultValue","onChange","onSelectChanged","bind","numeral","format","Chart","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d543abf9.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-6 md:px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <span className=\"text-xl tracking-tight\">COVID-19 DASHBOARD</span>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/core/covid-19\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          RAW DATA\n        </a>\n        <a href=\"https://www.datopian.com/about/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          TEAM\n        </a>\n        <a href=\"https://www.datopian.com/contact/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          CONTACT\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate}) => (\n  <div className=\"grid sm:grid-cols-1 lg:grid-cols-5 gap-8 mt-4 mb-4 font-bold text-3xl\">\n    <div className=\"border text-center py-16\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {deathRate}%\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases yesterday</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCaseRate}%\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  const data = props.data.map((trace, index) => {\n    const item = JSON.parse(JSON.stringify(trace));\n    const colors = ['black', 'gray', 'orange'];\n\n    switch(index) {\n      case 0:\n        item.name = 'Cumilative confirmed cases';\n        item.mode = 'lines+markers';\n        item.marker = {color: colors[index]};\n        break;\n      case 1:\n        item.name = 'New cases per day';\n        item.marker = {color: colors[index]};\n        break;\n      case 2:\n        item.name = 'Deaths per day';\n        item.marker = {color: colors[index]};\n        break;\n    }\n    return item;\n  })\n  return (\n    <Plot\n      className=\"w-full\"\n      data={data}\n      layout={ {yaxis: {type: 'log'}} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { parse } from 'papaparse';\nimport numeral from 'numeral';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport Chart from './Chart';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: 'world',\n      countriesToCompare: [],\n      worldwideData: [],\n      countryData: [],\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    const urlObject = new URL(window.location.href);\n    const country = urlObject.searchParams.get('country') || 'world';\n\n    this.setState({ isLoading: true, country });\n\n    const worldwideDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/worldwide-aggregated.csv'\n    const countryDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv'\n\n    const newState = {isLoading: false}\n\n    await Promise.all([worldwideDataUrl, countryDataUrl].map(async url => {\n      let response = await fetch(url)\n      if (url === worldwideDataUrl) {\n        newState.worldwideData = (parse(await response.text(), {header: true})).data;\n        if (!newState.worldwideData[newState.worldwideData.length - 1].Date) {\n          newState.worldwideData.pop();\n        }\n      } else if (url === countryDataUrl) {\n        newState.countryData = (parse(await response.text(), {header: true})).data;\n        if (!newState.countryData[newState.countryData.length - 1].Date) {\n          newState.countryData.pop();\n        }\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  getCountriesDataForDate(date) {\n    const { countryData } = this.state;\n    if (countryData.length > 0) {\n      const response = [];\n\n      if (date === 'latest') {\n        date = countryData[countryData.length - 1].Date;\n      } else if (date === 'previous') {\n        const latest = countryData[countryData.length - 1].Date;\n        const latestDateObj = new Date(latest);\n        const prevDateObj = new Date(latestDateObj.setDate(latestDateObj.getDate()-1));\n        date = prevDateObj.toISOString().slice(0,10);\n      }\n\n      countryData.forEach(row => {\n        if (row.Date === date) {\n          response.push(row);\n        }\n      })\n      return response;\n    }\n  }\n\n\n  getTotalCasesAndDeaths() {\n    const { worldwideData, country } = this.state;\n    let totalCases, totalDeaths;\n    if (country === 'world' && worldwideData.length > 0) {\n      totalCases = worldwideData[worldwideData.length - 1].Confirmed;\n      totalDeaths = worldwideData[worldwideData.length - 1].Deaths;\n    } else {\n      const countriesData = this.getCountriesDataForDate('latest');\n      if (countriesData) {\n        const selectedCountryData = countriesData\n          .find(item => item.Country.toLowerCase() === country.toLowerCase());\n        totalCases = selectedCountryData.Confirmed;\n        totalDeaths = selectedCountryData.Deaths;\n      }\n    }\n\n    return { totalCases, totalDeaths };\n  }\n\n\n  getNewCasesAndRate() {\n    const { worldwideData, countryData, country } = this.state;\n    let newCases, newCasesRate;\n    if (country === 'world' && worldwideData.length > 0) {\n      newCases = worldwideData[worldwideData.length - 1].Confirmed - worldwideData[worldwideData.length - 2].Confirmed;\n      newCasesRate = (newCases / worldwideData[worldwideData.length - 2].Confirmed * 100).toFixed(2);\n    } else if (countryData.length > 0) {\n      const latestCountryData = this.getCountriesDataForDate('latest')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      const prevCountryData = this.getCountriesDataForDate('previous')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      newCases = latestCountryData.Confirmed - prevCountryData.Confirmed;\n      newCasesRate = (newCases / prevCountryData.Confirmed * 100).toFixed(2);\n    }\n    return { newCases, newCasesRate };\n  }\n\n\n  getChartData() {\n    const { country, worldwideData, countryData } = this.state;\n    const trace1 = {x: [], y: [], type: 'scatter'};\n    const trace2 = {x: [], y: [], type: 'bar'};\n    const trace3 = {x: [], y: [], type: 'bar'};\n    let previousRow = {Confirmed: 0, Deaths: 0};\n    if (country === 'world') {\n      worldwideData.forEach(row => {\n        trace1.x.push(row.Date);\n        trace1.y.push(parseInt(row.Confirmed));\n        trace2.x.push(row.Date);\n        trace2.y.push(row.Confirmed - previousRow.Confirmed);\n        trace3.x.push(row.Date);\n        trace3.y.push(row.Deaths - previousRow.Deaths)\n        previousRow = JSON.parse(JSON.stringify(row));\n      })\n    } else {\n      countryData.forEach(row => {\n        if (row.Country.toLowerCase() === country.toLowerCase()) {\n          trace1.x.push(row.Date);\n          trace1.y.push(parseInt(row.Confirmed));\n          trace2.x.push(row.Date);\n          trace2.y.push(row.Confirmed - previousRow.Confirmed);\n          trace3.x.push(row.Date);\n          trace3.y.push(row.Deaths - previousRow.Deaths)\n          previousRow = JSON.parse(JSON.stringify(row));\n        }\n      })\n    }\n    return [trace1, trace2, trace3];\n  }\n\n\n  getChartDataForComparison() {\n    const { countriesToCompare, countryData } = this.state;\n    const traces = [];\n    countriesToCompare.forEach(country => {\n      const trace = {x: [], y: []};\n      countryData.forEach(row => {\n        if (row.Country.toLowerCase() === country.toLowerCase()) {\n          trace.x.push(row.Date);\n          trace.y.push(row.Confirmed);\n        }\n      })\n      traces.push(trace);\n    })\n    return traces;\n  }\n\n\n  getCountryOptions() {\n    const options = [{value: 'world', label: 'World'}];\n    const latestData = this.getCountriesDataForDate('latest');\n    if (latestData) {\n      latestData.forEach(item => options.push({value: item.Country, label: item.Country}));\n    }\n    return options;\n  }\n\n\n  onSelectChanged(data) {\n    const urlObject = new URL(window.location.href);\n    urlObject.searchParams.set('country', data.value);\n    window.history.pushState({path:urlObject.href}, '', urlObject.href);\n    this.setState({country: data.value});\n  }\n\n\n  onCompareSelectChanged(data) {\n    const { countriesToCompare } = this.state;\n    const newList = JSON.parse(JSON.stringify(countriesToCompare));\n    newList.push(data.value);\n    this.setState({countriesToCompare: newList})\n  }\n\n\n  render() {\n    const { country, isLoading } = this.state;\n\n    const { totalCases, totalDeaths } = this.getTotalCasesAndDeaths();\n    const deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n    const { newCases, newCasesRate } = this.getNewCasesAndRate();\n\n    const chartData = this.getChartData();\n\n    const options = this.getCountryOptions();\n\n    if (isLoading) {\n      return (\n        <div className=\"flex h-screen\">\n          <p className=\"m-auto\">Loading ...</p>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Header />\n        <div className=\"px-6 md:px-16\">\n          <Select\n            className=\"mt-6 w-full md:w-1/3 capitalize\"\n            options={options}\n            defaultValue={{value: country, label: country}}\n            isLoading={isLoading}\n            onChange={this.onSelectChanged.bind(this)}\n          />\n          <Indicators\n            totalCases={numeral(totalCases).format('0,0')}\n            totalDeaths={numeral(totalDeaths).format('0,0')}\n            deathRate={deathRate}\n            newCases={numeral(newCases).format('0,0')}\n            newCaseRate={newCasesRate}\n          />\n          <div className=\"mt-4 mb-4 w-full\">\n            <Chart data={chartData} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}