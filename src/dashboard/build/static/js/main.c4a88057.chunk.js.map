{"version":3,"sources":["Header.js","Indicators.js","Choropleth.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","MyResponsiveChoropleth","data","features","value","margin","top","right","bottom","left","colors","domain","unknownColor","label","valueFormat","projectionTranslation","projectionRotation","enableGraticule","graticuleLineColor","borderWidth","borderColor","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemTextColor","itemOpacity","symbolSize","effects","on","style","App","props","state","worldwideData","countryData","referenceData","isLoading","this","setState","worldwideDataUrl","countryDataUrl","referendeDataUrl","featuresUrl","newState","Promise","all","map","url","a","fetch","response","parse","text","header","json","latestCountryData","length","latestAvailableDate","Date","forEach","row","push","find","item","Country_Region","Country","iso3","latestData","previousData","Confirmed","Deaths","toFixed","parseFloat","toString","replace","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4a88057.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <span className=\"font-semibold text-xl tracking-tight\">COVID-19 DASHBOARD</span>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/core/covid-19\" target=\"_blank\" className=\"block mt-4 ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          RAW DATA\n        </a>\n        <a href=\"https://www.datopian.com/about/\" target=\"_blank\" className=\"block mt-4 ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          TEAM\n        </a>\n        <a href=\"https://www.datopian.com/contact/\" target=\"_blank\" className=\"block mt-4 ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          CONTACT\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate}) => (\n  <div className=\"grid grid-cols-5 gap-8 mt-4 mb-4 font-bold text-3xl\">\n    <div className=\"border text-center py-16\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases Worldwide</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths Worldwide</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {deathRate} %\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases yesterday</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCaseRate} %\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport { ResponsiveChoropleth } from '@nivo/geo'\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\nconst MyResponsiveChoropleth = ({ data, features }) => (\n    <ResponsiveChoropleth\n        data={data}\n        value=\"Confirmed\"\n        features={features}\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n        colors=\"oranges\"\n        domain={[ 1000, 400000 ]}\n        unknownColor=\"#666666\"\n        label=\"properties.name\"\n        valueFormat=\".2s\"\n        projectionTranslation={[ 0.5, 0.5 ]}\n        projectionRotation={[ 0, 0, 0 ]}\n        enableGraticule={true}\n        graticuleLineColor=\"#dddddd\"\n        borderWidth={0.5}\n        borderColor=\"#152538\"\n        legends={[\n            {\n                anchor: 'bottom-left',\n                direction: 'column',\n                justify: true,\n                translateX: 20,\n                translateY: -100,\n                itemsSpacing: 0,\n                itemWidth: 94,\n                itemHeight: 18,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#444444',\n                itemOpacity: 0.85,\n                symbolSize: 18,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000000',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\n\nexport default MyResponsiveChoropleth;\n","import React, { Component } from 'react';\nimport { parse } from 'papaparse';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport MyResponsiveChoropleth from './Choropleth';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worldwideData: [],\n      countryData: [],\n      referenceData: [],\n      features: [],\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n\n    const worldwideDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/worldwide-aggregated.csv'\n    const countryDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv'\n    const referendeDataUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv'\n    const featuresUrl = 'https://raw.githubusercontent.com/plouc/nivo/master/website/src/data/components/geo/world_countries.json'\n\n    const newState = {isLoading: false}\n\n    await Promise.all([worldwideDataUrl, countryDataUrl, referendeDataUrl, featuresUrl].map(async url => {\n      let response = await fetch(url)\n      if (url === worldwideDataUrl) {\n        newState.worldwideData = (parse(await response.text(), {header: true})).data\n      } else if (url === countryDataUrl) {\n        newState.countryData = (parse(await response.text(), {header: true})).data\n      } else if (url === referendeDataUrl) {\n        newState.referenceData = (parse(await response.text(), {header: true})).data\n      } else if (url === featuresUrl) {\n        newState.features = (await response.json()).features\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  render() {\n    const { worldwideData, countryData, referenceData, features, isLoading } = this.state;\n    let latestCountryData = [];\n    if (countryData.length > 0) {\n      // Assumption is that data is sorted by date and country which is true at the moment\n      // The last row is empty so using penultimate row\n      const latestAvailableDate = countryData[countryData.length - 2].Date;\n      countryData.forEach(row => {\n        if (row.Date === latestAvailableDate) {\n          latestCountryData.push(row)\n        }\n      })\n    }\n    if (latestCountryData.length > 0 && referenceData.length > 0) {\n      latestCountryData.forEach(row => {\n        row['id'] = (referenceData.find(item => item.Country_Region === row.Country)).iso3\n      })\n    }\n    let totalCases, totalDeaths, deathRate, newCases, newCaseRate;\n    if (worldwideData.length > 0) {\n      const latestData = worldwideData[worldwideData.length - 2];\n      const previousData = worldwideData[worldwideData.length - 3];\n      totalCases = latestData.Confirmed;\n      totalDeaths = latestData.Deaths;\n      deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n      newCases = totalCases - previousData.Confirmed;\n      newCaseRate = parseFloat(latestData['Increase rate']).toFixed(2);\n      // Format numbers\n      totalCases = totalCases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      totalDeaths = totalDeaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      newCases = newCases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    if (isLoading) {\n      return <p>Loading ...</p>;\n    }\n    return (\n      <div className=\"h-screen\">\n        <Header />\n        <div className=\"px-16 h-full\">\n          <Indicators\n            totalCases={totalCases}\n            totalDeaths={totalDeaths}\n            deathRate={deathRate}\n            newCases={newCases}\n            newCaseRate={newCaseRate}\n          />\n          <MyResponsiveChoropleth data={latestCountryData} features={features} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}