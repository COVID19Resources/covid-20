{"version":3,"sources":["Header.js","Indicators.js","Chart.js","Choropleth.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","casesPer100k","props","data","layout","yaxis","type","colorway","config","responsive","displayModeBar","title","geo","showframe","showcoastlines","showland","landcolor","projection","App","state","country","worldwideData","countryData","referenceData","isLoading","urlObject","URL","window","location","searchParams","get","this","setState","worldwideDataUrl","countryDataUrl","referenceDataUrl","newState","Promise","all","map","url","a","fetch","response","parse","text","header","length","Date","pop","date","latest","latestDateObj","prevDateObj","setDate","getDate","toISOString","slice","forEach","row","push","Confirmed","Deaths","countriesData","getCountriesDataForDate","selectedCountryData","find","item","Country","toLowerCase","newCasesRate","toFixed","latestCountryData","prevCountryData","countryPopulation","Population","trace1","x","y","name","mode","trace2","trace3","previousRow","parseInt","JSON","stringify","trace","orientation","locations","z","autocolorscale","zmin","zmax","colorscale","colorbar","thickness","marker","line","color","width","referenceItem","iso3","options","value","label","latestData","set","history","pushState","path","countriesToCompare","newList","getTotalCasesAndDeaths","getNewCasesAndRate","getCasesPer100k","chartData","getChartData","mapData","getMapData","getCountryOptions","defaultValue","onChange","onSelectChanged","bind","numeral","format","Chart","Choropleth","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9900db0.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-6 md:px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <span className=\"text-xl tracking-tight\">COVID-19 DASHBOARD</span>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/core/covid-19\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          RAW DATA\n        </a>\n        <a href=\"https://www.datopian.com/about/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          TEAM\n        </a>\n        <a href=\"https://www.datopian.com/contact/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          CONTACT\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate, casesPer100k}) => (\n  <div className=\"grid sm:grid-cols-1 lg:grid-cols-6 gap-6 mt-4 mb-4 font-bold text-2xl\">\n    <div className=\"border text-center py-12\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {deathRate}%\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases yesterday</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {newCaseRate}%\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {casesPer100k}\n      <div className=\"text-xs text-gray-600 font-light\">Cases per 100k</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  return (\n    <Plot\n      className=\"w-full h-graph\"\n      data={props.data}\n      layout={ {yaxis: {type: 'log'}, colorway: ['black', 'gray', 'orange']} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  return (\n    <Plot\n      className=\"w-full h-screen\"\n      data={props.data}\n      layout={ {\n        title: 'Cumulative confirmed cases',\n        geo:{\n          showframe: false,\n          showcoastlines: false,\n          showland: true,\n          landcolor: 'rgb(217, 217, 217)',\n          projection:{\n            type: 'mercator'\n          }\n      }} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { parse } from 'papaparse';\nimport numeral from 'numeral';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport Chart from './Chart';\nimport Choropleth from './Choropleth';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: 'world',\n      worldwideData: [],\n      countryData: [],\n      referenceData: [],\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    const urlObject = new URL(window.location.href);\n    const country = urlObject.searchParams.get('country') || 'world';\n\n    this.setState({ isLoading: true, country });\n\n    const worldwideDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/worldwide-aggregated.csv';\n    const countryDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv';\n    const referenceDataUrl = 'https://raw.githubusercontent.com/datasets/covid-19/master/data/reference.csv';\n\n    const newState = {isLoading: false}\n\n    await Promise.all([worldwideDataUrl, countryDataUrl, referenceDataUrl].map(async url => {\n      let response = await fetch(url)\n      if (url === worldwideDataUrl) {\n        newState.worldwideData = (parse(await response.text(), {header: true})).data;\n        if (!newState.worldwideData[newState.worldwideData.length - 1].Date) {\n          newState.worldwideData.pop();\n        }\n      } else if (url === countryDataUrl) {\n        newState.countryData = (parse(await response.text(), {header: true})).data;\n        if (!newState.countryData[newState.countryData.length - 1].Date) {\n          newState.countryData.pop();\n        }\n      } else if (url === referenceDataUrl) {\n        newState.referenceData = (parse(await response.text(), {header: true})).data;\n        if (!newState.referenceData[newState.referenceData.length - 1].Date) {\n          newState.referenceData.pop();\n        }\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  getCountriesDataForDate(date) {\n    const { countryData } = this.state;\n    if (countryData.length > 0) {\n      const response = [];\n\n      if (date === 'latest') {\n        date = countryData[countryData.length - 1].Date;\n      } else if (date === 'previous') {\n        const latest = countryData[countryData.length - 1].Date;\n        const latestDateObj = new Date(latest);\n        const prevDateObj = new Date(latestDateObj.setDate(latestDateObj.getDate()-1));\n        date = prevDateObj.toISOString().slice(0,10);\n      }\n\n      countryData.forEach(row => {\n        if (row.Date === date) {\n          response.push(row);\n        }\n      })\n      return response;\n    }\n  }\n\n\n  getTotalCasesAndDeaths() {\n    const { worldwideData, country } = this.state;\n    let totalCases, totalDeaths;\n    if (country === 'world' && worldwideData.length > 0) {\n      totalCases = worldwideData[worldwideData.length - 1].Confirmed;\n      totalDeaths = worldwideData[worldwideData.length - 1].Deaths;\n    } else {\n      const countriesData = this.getCountriesDataForDate('latest');\n      if (countriesData) {\n        const selectedCountryData = countriesData\n          .find(item => item.Country.toLowerCase() === country.toLowerCase());\n        totalCases = selectedCountryData.Confirmed;\n        totalDeaths = selectedCountryData.Deaths;\n      }\n    }\n\n    return { totalCases, totalDeaths };\n  }\n\n\n  getNewCasesAndRate() {\n    const { worldwideData, countryData, country } = this.state;\n    let newCases, newCasesRate;\n    if (country === 'world' && worldwideData.length > 0) {\n      newCases = worldwideData[worldwideData.length - 1].Confirmed - worldwideData[worldwideData.length - 2].Confirmed;\n      newCasesRate = (newCases / worldwideData[worldwideData.length - 2].Confirmed * 100).toFixed(2);\n    } else if (countryData.length > 0) {\n      const latestCountryData = this.getCountriesDataForDate('latest')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      const prevCountryData = this.getCountriesDataForDate('previous')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      newCases = latestCountryData.Confirmed - prevCountryData.Confirmed;\n      newCasesRate = (newCases / prevCountryData.Confirmed * 100).toFixed(2);\n    }\n    return { newCases, newCasesRate };\n  }\n\n\n  getCasesPer100k() {\n    const { worldwideData, referenceData, country } = this.state;\n    let casesPer100k;\n    const countriesData = this.getCountriesDataForDate('latest');\n    if (country.toLowerCase() === 'world') {\n      if (worldwideData.length > 0) {\n        const worldPopulation = 7594270356;\n        casesPer100k = (worldwideData[worldwideData.length - 1].Confirmed / worldPopulation * 100000).toFixed(2);\n      }\n    } else if (countriesData && referenceData.length > 0) {\n      const selectedCountryData = countriesData\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      const countryPopulation = referenceData\n        .find(item => item['Country_Region'].toLowerCase() === country.toLowerCase())\n        .Population;\n      casesPer100k = (selectedCountryData.Confirmed / countryPopulation * 100000).toFixed(2);\n    }\n\n    return casesPer100k;\n  }\n\n\n  getChartData() {\n    const { country, worldwideData, countryData } = this.state;\n    const trace1 = {x: [], y: [], type: 'scatter', name: 'Cumilative confirmed cases', mode: 'lines+markers'};\n    const trace2 = {x: [], y: [], type: 'bar', name: 'New cases per day'};\n    const trace3 = {x: [], y: [], type: 'bar', name: 'Deaths per day'};\n    let previousRow = {Confirmed: 0, Deaths: 0};\n    if (country === 'world') {\n      worldwideData.forEach(row => {\n        trace1.x.push(row.Date);\n        trace1.y.push(parseInt(row.Confirmed));\n        trace2.x.push(row.Date);\n        trace2.y.push(row.Confirmed - previousRow.Confirmed);\n        trace3.x.push(row.Date);\n        trace3.y.push(row.Deaths - previousRow.Deaths)\n        previousRow = JSON.parse(JSON.stringify(row));\n      })\n    } else {\n      countryData.forEach(row => {\n        if (row.Country.toLowerCase() === country.toLowerCase()) {\n          trace1.x.push(row.Date);\n          trace1.y.push(parseInt(row.Confirmed));\n          trace2.x.push(row.Date);\n          trace2.y.push(row.Confirmed - previousRow.Confirmed);\n          trace3.x.push(row.Date);\n          trace3.y.push(row.Deaths - previousRow.Deaths)\n          previousRow = JSON.parse(JSON.stringify(row));\n        }\n      })\n    }\n    return [trace1, trace2, trace3];\n  }\n\n\n  getChartDataForComparison() {\n    const { referenceData } = this.state;\n    const trace = {x: [], y: [], type: 'bar', orientation: 'h'};\n    const countriesData = this.getCountriesDataForDate('latest');\n    if (countriesData && referenceData.length > 0) {\n      countriesData.forEach(row => {\n        trace.y.push(row.Country);\n        const countryPopulation = referenceData\n          .find(item => item['Country_Region'].toLowerCase() === row.Country.toLowerCase())\n          .Population;\n        const casesPer100k = (row.Confirmed / countryPopulation * 100000).toFixed(2);\n        trace.x.push(casesPer100k);\n      })\n    }\n    return [trace];\n  }\n\n\n  getMapData() {\n    const { referenceData } = this.state;\n    const countriesData = this.getCountriesDataForDate('latest');\n\n    const data = [{\n      type: 'choropleth',\n      locations: [], // ISO3 codes\n      z: [], // Values\n      text: [], // Country names\n      autocolorscale: false,\n      zmin: 100,\n      zmax: 1000000,\n      colorscale: [\n        [0, 'rgb(255,246,229)'], [0.2, 'rgb(255,165,1)'],\n        [0.4, 'rgb(229,148,0)'], [0.6, 'rgb(178,115,0)'],\n        [0.8, 'rgb(127,82,0)'], [1, 'rgb(51,33,0)']\n      ],\n      colorbar: {\n        thickness: 5\n      },\n      marker: {\n        line:{\n          color: 'rgb(255,255,255)',\n          width: 1\n        }\n      }\n    }];\n\n    if (countriesData && referenceData.length > 0) {\n      countriesData.forEach(row => {\n        data[0].z.push(row.Confirmed);\n        data[0].text.push(row.Country);\n        const referenceItem = referenceData\n          .find(item => item['Country_Region'].toLowerCase() === row.Country.toLowerCase());\n        data[0].locations.push(referenceItem.iso3);\n      })\n    }\n\n    return data;\n  }\n\n\n  getCountryOptions() {\n    const options = [{value: 'world', label: 'World'}];\n    const latestData = this.getCountriesDataForDate('latest');\n    if (latestData) {\n      latestData.forEach(item => options.push({value: item.Country, label: item.Country}));\n    }\n    return options;\n  }\n\n\n  onSelectChanged(data) {\n    const urlObject = new URL(window.location.href);\n    urlObject.searchParams.set('country', data.value);\n    window.history.pushState({path:urlObject.href}, '', urlObject.href);\n    this.setState({country: data.value});\n  }\n\n\n  onCompareSelectChanged(data) {\n    const { countriesToCompare } = this.state;\n    const newList = JSON.parse(JSON.stringify(countriesToCompare));\n    newList.push(data.value);\n    this.setState({countriesToCompare: newList})\n  }\n\n\n  render() {\n    const { country, isLoading } = this.state;\n\n    const { totalCases, totalDeaths } = this.getTotalCasesAndDeaths();\n    const deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n    const { newCases, newCasesRate } = this.getNewCasesAndRate();\n    const casesPer100k = this.getCasesPer100k();\n\n    const chartData = this.getChartData();\n\n    const mapData = this.getMapData();\n\n    const options = this.getCountryOptions();\n\n    if (isLoading) {\n      return (\n        <div className=\"flex h-screen\">\n          <p className=\"m-auto\">Loading ...</p>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Header />\n        <div className=\"px-6 md:px-16\">\n          <Select\n            className=\"mt-6 w-full md:w-1/3 capitalize\"\n            options={options}\n            defaultValue={{value: country, label: country}}\n            isLoading={isLoading}\n            onChange={this.onSelectChanged.bind(this)}\n          />\n          <Indicators\n            totalCases={numeral(totalCases).format('0,0')}\n            totalDeaths={numeral(totalDeaths).format('0,0')}\n            deathRate={deathRate}\n            newCases={numeral(newCases).format('0,0')}\n            newCaseRate={newCasesRate}\n            casesPer100k={casesPer100k}\n          />\n          <div className=\"mt-4 mb-4 w-full\">\n            <Chart data={chartData} />\n          </div>\n          <div className=\"mt-4 mb-4 w-full\">\n            <Choropleth data={mapData} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}